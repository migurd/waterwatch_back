-- +goose Up
-- +goose StatementBegin
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.

-- +goose StatementEnd
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."SAA"
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    address_id bigint NOT NULL,
    "SAA_type_id" bigint NOT NULL,
    microncontroller_id bigint NOT NULL,
    CONSTRAINT "SAA_pkey" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."SAA_record"
(
    id bigserial NOT NULL,
    "SAA_id" bigint NOT NULL,
    water_level double precision NOT NULL,
    "pH_level" double precision NOT NULL,
    is_contaminated boolean NOT NULL DEFAULT false,
    date timestamp with time zone NOT NULL,
    CONSTRAINT "SAA_record_pkey" PRIMARY KEY (id)
);

COMMENT ON TABLE public."SAA_record"
    IS 'Water level is in percentage';

CREATE TABLE IF NOT EXISTS public."SAA_type"
(
    id bigserial NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying COLLATE pg_catalog."default" NOT NULL,
    capacity integer NOT NULL,
    CONSTRAINT "SAA_type_pkey" PRIMARY KEY (id)
);

COMMENT ON TABLE public."SAA_type"
    IS 'capacity is in mL';

CREATE TABLE IF NOT EXISTS public.account
(
    user_id bigint NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    PRIMARY KEY (user_id),
    CONSTRAINT account_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.account_security
(
    user_id bigint NOT NULL,
    attempts integer NOT NULL,
    max_attempts integer DEFAULT 5,
    last_attempt timestamp with time zone NOT NULL,
    last_time_password_changed timestamp with time zone,
    PRIMARY KEY (user_id),
    UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.address
(
    id bigserial NOT NULL,
    state character varying(255) COLLATE pg_catalog."default" NOT NULL,
    city character varying(255) COLLATE pg_catalog."default" NOT NULL,
    street character varying(255) COLLATE pg_catalog."default" NOT NULL,
    house_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    suburb character varying(255) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.goose_db_version
(
    id serial NOT NULL,
    version_id bigint NOT NULL,
    is_applied boolean NOT NULL,
    tstamp timestamp without time zone DEFAULT now(),
    CONSTRAINT goose_db_version_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."SAA_maintenance"
(
    id bigserial NOT NULL,
    "SAA_id" bigint NOT NULL,
    details character varying(1023) COLLATE pg_catalog."default" NOT NULL,
    requested_date timestamp with time zone NOT NULL,
    done_date timestamp with time zone,
    CONSTRAINT maintenance_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.microcontroller
(
    id bigserial NOT NULL,
    serial_key character varying(23) COLLATE pg_catalog."default" NOT NULL,
    status boolean NOT NULL DEFAULT false,
    CONSTRAINT microcontroller_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_phone_number
(
    user_id bigint NOT NULL,
    phone_number character varying(12) COLLATE pg_catalog."default" NOT NULL,
    PRIMARY KEY (user_id),
    UNIQUE (phone_number)
);

CREATE TABLE IF NOT EXISTS public."user"
(
    id bigserial NOT NULL,
    address_id bigint DEFAULT 1,
    first_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY (id),
    UNIQUE (address_id)
);

CREATE TABLE IF NOT EXISTS public.employee
(
    id bigserial NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    phone_number character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    curp character varying(18) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.appointment
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    employee_id bigint,
    requested_date timestamp with time zone NOT NULL,
    done_date timestamp with time zone,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_email
(
    user_id bigint NOT NULL,
    email character varying(255) NOT NULL,
    PRIMARY KEY (user_id),
    UNIQUE (email)
);

ALTER TABLE IF EXISTS public."SAA"
    ADD CONSTRAINT "SAA_SAA_type_id_fkey" FOREIGN KEY ("SAA_type_id")
    REFERENCES public."SAA_type" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."SAA"
    ADD CONSTRAINT "SAA_address_id_fkey" FOREIGN KEY (address_id)
    REFERENCES public.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."SAA"
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."SAA"
    ADD FOREIGN KEY (microncontroller_id)
    REFERENCES public.microcontroller (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."SAA_record"
    ADD CONSTRAINT "SAA_record_SAA_id_fkey" FOREIGN KEY ("SAA_id")
    REFERENCES public."SAA" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.account
    ADD CONSTRAINT account_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.account_security
    ADD FOREIGN KEY (user_id)
    REFERENCES public.account (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."SAA_maintenance"
    ADD CONSTRAINT "maintenance_SAA_id_fkey" FOREIGN KEY ("SAA_id")
    REFERENCES public."SAA" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_phone_number
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."user"
    ADD CONSTRAINT user_address_id_fkey FOREIGN KEY (address_id)
    REFERENCES public.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.appointment
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.appointment
    ADD FOREIGN KEY (employee_id)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_email
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
-- +goose Down
-- +goose StatementBegin
BEGIN;


DROP TABLE IF EXISTS public."SAA" CASCADE;
DROP TABLE IF EXISTS public."SAA_record" CASCADE;
DROP TABLE IF EXISTS public."SAA_type" CASCADE;
DROP TABLE IF EXISTS public.account CASCADE;
DROP TABLE IF EXISTS public.account_security CASCADE;
DROP TABLE IF EXISTS public.address CASCADE;
DROP TABLE IF EXISTS public."SAA_maintenance" CASCADE;
DROP TABLE IF EXISTS public.microcontroller CASCADE;
DROP TABLE IF EXISTS public.user_phone_number CASCADE;
DROP TABLE IF EXISTS public."user" CASCADE;
DROP TABLE IF EXISTS public.employee CASCADE;
DROP TABLE IF EXISTS public.appointment CASCADE;

END;
-- +goose StatementEnd
